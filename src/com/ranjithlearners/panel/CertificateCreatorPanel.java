/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ranjithlearners.panel;

import com.ranjithlearners.connection.MySQL;
import com.ranjithlearners.connection.MySQLProxy;
import com.ranjithlearners.util.BackgroundPanel;
import org.apache.poi.xwpf.usermodel.*;
import java.io.*;
import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Akash Weerasinghe
 */
public class CertificateCreatorPanel extends BackgroundPanel {

    /**
     * Creates new form CertificateCreatorPanel
     */
    public CertificateCreatorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 153));
        setMinimumSize(new java.awt.Dimension(830, 645));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Certificate Creator");

        jButton1.setText("Create File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(336, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(227, 227, 227)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(314, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            MySQL MySQL = new MySQLProxy();
            ResultSet rs = MySQL.executeSearch(
                    "SELECT "
                    + "s.smrt_yearcode AS yearcode, "
                    + "sm.course_code, "
                    + "sm.smrt_no, "
                    + "st.id, "
                    + "st.name, "
                    + "st.nic, "
                    + "DATE(st.created_at) AS created_date "
                    + "FROM student_has_smrt s "
                    + "JOIN student st ON s.student_id = st.id "
                    + "JOIN smrt sm ON s.smrt_yearcode = sm.yearcode AND s.smrt_smrt_no = sm.smrt_no"
            );

            File outputFolder = new File(System.getProperty("user.home"), "Desktop/pdf_output");
            if (!outputFolder.exists()) {
                outputFolder.mkdirs();
            }

            File tempFolder = new File(System.getProperty("java.io.tmpdir"));

            int counter = 1;
            boolean anyError = false;

            while (rs.next()) {
                String name = rs.getString("name").replaceAll("[^a-zA-Z0-9]", "_");
                String date = rs.getString("created_date");
                String id = rs.getString("id");
                String dsr = "DS629";
                String smrt = rs.getString("yearcode") + "/" + rs.getString("course_code") + "/" + rs.getString("smrt_no");

                System.out.println("Generating for: " + name);

                FileInputStream fis = new FileInputStream("template.docx");
                XWPFDocument doc = new XWPFDocument(fis);

                doc.getParagraphs().forEach(p -> {
                    p.getRuns().forEach(run -> {
                        String text = run.getText(0);
                        if (text != null) {
                            text = text.replace("{{Name}}", name)
                                    .replace("{{Date}}", date)
                                    .replace("{{ID}}", id)
                                    .replace("{{DSR}}", dsr)
                                    .replace("{{SMRT}}", smrt);
                            run.setText(text, 0);
                        }
                    });
                });

                doc.getTables().forEach(table -> {
                    table.getRows().forEach(row -> {
                        row.getTableCells().forEach(cell -> {
                            cell.getParagraphs().forEach(p -> {
                                p.getRuns().forEach(run -> {
                                    String text = run.getText(0);
                                    if (text != null) {
                                        text = text.replace("{{Name}}", name)
                                                .replace("{{Date}}", date)
                                                .replace("{{ID}}", id)
                                                .replace("{{DSR}}", dsr)
                                                .replace("{{SMRT}}", smrt);
                                        run.setText(text, 0);
                                    }
                                });
                            });
                        });
                    });
                });

                fis.close();

                File tempDocx = new File(System.getProperty("java.io.tmpdir"), "temp_cert_" + counter + ".docx");
                try (FileOutputStream fos = new FileOutputStream(tempDocx)) {
                    doc.write(fos);
                }
                doc.close();

                // Convert to PDF
                ProcessBuilder pb = new ProcessBuilder(
                        "C:\\Program Files\\LibreOffice\\program\\soffice.exe",
                        "--headless",
                        "--convert-to", "pdf",
                        "--outdir", outputFolder.getAbsolutePath(),
                        tempDocx.getAbsolutePath()
                );
                Process process = pb.start();
                process.waitFor();

                // Predict the PDF name generated
                File generatedPDF = new File(outputFolder, tempDocx.getName().replace(".docx", ".pdf"));
                File finalPDF = new File(outputFolder, name + "_" + id + ".pdf");

                if (generatedPDF.exists()) {
                    generatedPDF.renameTo(finalPDF);
                    tempDocx.delete(); // remove temp DOCX
                    System.out.println("✅ PDF saved as: " + finalPDF.getName());
                } else {
                    System.err.println("❌ PDF not generated for " + name);
                }

                counter++;
            }

            rs.close();

            if (anyError) {
                JOptionPane.showMessageDialog(this,
                        "Some certificates may not have been generated due to errors.\nCheck console for details.",
                        "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                        "✅ All certificates generated successfully.\nCheck your Desktop/pdf_output folder.",
                        "Success", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "❌ Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
